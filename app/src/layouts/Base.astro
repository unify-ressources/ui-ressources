---
// import { join } from "node:path";
import { AstroFont } from "astro-font";
import "@assets/css/global.css";
import "@assets/css/find-ui.css";
import type { SeoType } from "../types";
import SEO from "@components/molecules/SEO.astro";
type Props = {
  seo: SeoType;
};

const { seo } = Astro.props;
---

<!doctype html>
<html lang="en" class="bg-body">
  <head>
    <SEO seo={seo}>
      <link rel="sitemap" href="/sitemap-index.xml" />
    </SEO>
    <AstroFont
      config={[
        {
          name: "geistSans",
          src: [
            {
              style: "normal",
              weight: "400",
              path: "/fonts/geist-normal.woff",
            },
            {
              style: "normal",
              weight: "500",
              path: "/fonts/geist-medium.woff",
            },
            {
              style: "normal",
              weight: "600",
              path: "/fonts/geist-semibold.woff",
            }
          ],
          preload: true,
          display: "swap",
          selector: ".font-geist",
          fallback: "serif",
        },
      ]}
    />

    <script is:inline>
      const docEl = document.documentElement;
      const getThemePreference = () => {
        if (
          typeof localStorage !== "undefined" &&
          localStorage.getItem("theme")
        ) {
          return localStorage.getItem("theme");
        }
        return window.matchMedia("(prefers-color-scheme: dark)").matches
          ? "dark"
          : "light";
      };

      const getThemePalette = () => {
        if (
          typeof localStorage !== "undefined" &&
          localStorage.getItem("palette")
        ) {
          return localStorage.getItem("palette");
        }
        return "default";
      };

      const isDark = getThemePreference() === "dark";
      const palette = getThemePalette();
      docEl.classList[isDark ? "add" : "remove"]("dark");
      docEl.setAttribute("data-palette", palette);

      if (typeof localStorage !== "undefined") {
        const observer = new MutationObserver(() => {
          const isDark = docEl.classList.contains("dark");
          const hasPalette = docEl.getAttribute("data-palette");
          localStorage.setItem("theme", isDark ? "dark" : "light");
          localStorage.setItem("palette", hasPalette ? hasPalette : "default");
        });
        observer.observe(docEl, {
          attributes: true,
          attributeFilter: ["class", "data-palette"],
        });
      }
    </script>
    <script is:inline src="/_pagefind/pagefind-ui.js" type="text/javascript"
    ></script>
    <script is:inline>
      window.addEventListener("DOMContentLoaded", () => {
        new PagefindUI({
          element: "#search[data-doc-page-find]",
          showSubResults: true,
          resetStyles: false,
          showEmptyFilters: false,
          excerptLength: 15,
          showImages: false,
        });
      });
    </script>
  </head>
  <body
    class="overflow-hidden overflow-y-auto lg-overflow-y-auto bg-body font-geist"
    
  >
    <slot />
    <script>
      import "@assets/js/theme";
      import "@assets/js/global";
      import "@assets/js/switch-palette";
    </script>
  </body>
</html>
